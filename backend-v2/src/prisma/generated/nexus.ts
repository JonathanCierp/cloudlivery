/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Context from "../context"
import { core } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    datetime<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    datetime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Default: { // root type
    message: string; // String!
  }
  DefaultBool: { // root type
    valid: boolean; // Boolean!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    civilite: string; // String!
    createdAt: any; // DateTime!
    email: string; // String!
    firstname: string; // String!
    google_id?: string | null; // String
    id: number; // Int!
    lastname: string; // String!
    updatedAt: any; // DateTime!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
}

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Default: { // field return type
    message: string; // String!
  }
  DefaultBool: { // field return type
    valid: boolean; // Boolean!
  }
  Mutation: { // field return type
    googleSignin: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    resetPassword: NexusGenRootTypes['Default']; // Default!
    resetPasswordSave: NexusGenRootTypes['Default']; // Default!
    setupDatas: NexusGenRootTypes['Default']; // Default!
    signin: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    signout: NexusGenRootTypes['Default']; // Default!
    signup: NexusGenRootTypes['Default']; // Default!
  }
  Query: { // field return type
    me: NexusGenRootTypes['User']; // User!
    tokenIsOk: NexusGenRootTypes['DefaultBool'] | null; // DefaultBool
  }
  User: { // field return type
    civilite: string; // String!
    createdAt: any; // DateTime!
    email: string; // String!
    firstname: string; // String!
    google_id: string | null; // String
    id: number; // Int!
    lastname: string; // String!
    updatedAt: any; // DateTime!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    googleSignin: { // args
      email: string; // String!
      firstname?: string | null; // String
      google_id?: string | null; // String
      lastname?: string | null; // String
      rememberMe: boolean; // Boolean!
    }
    resetPassword: { // args
      email: string; // String!
    }
    resetPasswordSave: { // args
      password: string; // String!
      token: string; // String!
    }
    signin: { // args
      email: string; // String!
      password: string; // String!
      rememberMe: boolean; // Boolean!
    }
    signup: { // args
      civilite: string; // String!
      email: string; // String!
      firstname: string; // String!
      lastname: string; // String!
      password: string; // String!
    }
  }
  Query: {
    tokenIsOk: { // args
      token: string; // String!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthPayload" | "Default" | "DefaultBool" | "Mutation" | "Query" | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}